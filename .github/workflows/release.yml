# GitHub Actions workflow for building and releasing Flutter APKs.
#
# This workflow is triggered on every push to the 'release' branch.
# It automatically increments the version number, builds a signed release APK, 
# and creates a new GitHub Release.
#
name: Build and Release APK

on:
  push:
    branches:
      - release

jobs:
  build-and-release:
    # Prevent workflow from running in an infinite loop
    if: "!contains(github.event.head_commit.message, 'Bump version to')"
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to create a release and commit version changes.

    steps:
      # Step 1: Check out the repository code.
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history. Required for the version bump action.
          token: ${{ secrets.GITHUB_TOKEN }} # The token is needed for the version bump action to push changes

      # Step 2: Set up the Java Development Kit (JDK).
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Step 3: Set up the Flutter SDK.
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # Step 4: Install Flutter dependencies.
      - name: Install dependencies
        run: flutter pub get

      # Step 5: Bump version
      - name: Bump version
        id: version-increment
        uses: RodXander/flutter-bump-version@v0.0.02
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: 'release'
          
      # Step 6: Decode the keystore and create the key.properties file.
      - name: Decode Keystore and Create Properties File
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          echo "Writing keystore and properties file..."
          echo "$KEYSTORE_BASE64" | base64 --decode > android/app/release.jks
          echo "storeFile=release.jks" > android/app/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/app/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/app/key.properties
          echo "storePassword=$STORE_PASSWORD" >> android/app/key.properties
          echo "Keystore and properties files created successfully."

      # Step 7: Build the signed release APK.
      - name: Build signed release APK
        run: flutter build apk --release

      # Step 8: Rename the artifact to include build info and set the release name.
      - name: Rename APK
        run: |
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/fuelTracker-release-${{ steps.version-increment.outputs.new_version }}.apk

      # Step 9: Create a GitHub Release and upload the APK.
      - name: Create Release and Upload Artifact
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version-increment.outputs.new_version }}
          name: "Release ${{ steps.version-increment.outputs.new_version }}"
          body: |
            Automated release for version ${{ steps.version-increment.outputs.new_version }}.
            - Release APK (signed)
          files: build/app/outputs/flutter-apk/fuelTracker-release-*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
